{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to 2D Platformer Ninja vs Zombies Game Template Thank you for your purchase! Overview What is 2D Platformer Ninja vs Zombies Game Template? This is a ready-made template for a game in the Platform genre. It can be used on any platform. The Asset also uses the new Unity input system. Main feature: Available for all platforms: PC(Windows, Mac, Linux), Mobile(Android, IOS) Flexible and commented code New input system Prefab variation in enemies Easy setup Damage and stamina system Pick up items by Trigger (HP and Stamina replenishment) The platforms are made in Tilemap Installation After purchasing the asset, go to your project (Version unity in asset 2021.3.7f1 ) Open your project Go to Window->Package manager Select in Packages: My assets Find 2D Platformer Ninja vs Zombies Game Template in the list Download Import If a dialog box displays requiring you to install a new input system for this project, accept it . Unity will restart and if the import of the Asset will not continue, then import again as described before.","title":"Getting Started"},{"location":"#welcome-to-2d-platformer-ninja-vs-zombies-game-template","text":"Thank you for your purchase!","title":"Welcome to 2D Platformer Ninja vs Zombies Game Template"},{"location":"#overview","text":"","title":"Overview"},{"location":"#installation","text":"After purchasing the asset, go to your project (Version unity in asset 2021.3.7f1 ) Open your project Go to Window->Package manager Select in Packages: My assets Find 2D Platformer Ninja vs Zombies Game Template in the list Download Import If a dialog box displays requiring you to install a new input system for this project, accept it . Unity will restart and if the import of the Asset will not continue, then import again as described before.","title":"Installation"},{"location":"code/","text":"Game logic Editing scripts is not difficult if you are familiar with c # Namespace namespace Platformer { //class } Platformer namespace is used for all scripts to avoid conflicts with your scripts. Editing All code has comments describing each action, so editing is easy namespace Platformer { public class Custom_Item : PickUpItem { protected override void OnPickedUp() { /////////////////////////////////////////////////Here your logic Debug.Log(\"It's my logic\"); ///////////////////////////////////////////////// } } }","title":"Code"},{"location":"code/#game-logic","text":"Editing scripts is not difficult if you are familiar with c #","title":"Game logic"},{"location":"code/#namespace","text":"namespace Platformer { //class } Platformer namespace is used for all scripts to avoid conflicts with your scripts.","title":"Namespace"},{"location":"code/#editing","text":"All code has comments describing each action, so editing is easy namespace Platformer { public class Custom_Item : PickUpItem { protected override void OnPickedUp() { /////////////////////////////////////////////////Here your logic Debug.Log(\"It's my logic\"); ///////////////////////////////////////////////// } } }","title":"Editing"},{"location":"credit/","text":"Credit 2D Platformer Ninja vs Zombies Game Template by SoloQ Site Contact: Contact form on site Email: Glucknut@gmail.com Other Assets Idle Clicker Car Game Template - Asset store Clicker-Idle Game Template - Asset store 2D Platformer Game Template - Asset store The Battle Multiplayer Game Template - Asset store The Dungeon Game Kit - Asset store Quests system - Asset store Other Projects Remains - Steam , GOG , VKPlay Operation sniff - Steam","title":"Credit"},{"location":"credit/#credit","text":"2D Platformer Ninja vs Zombies Game Template by SoloQ Site Contact: Contact form on site Email: Glucknut@gmail.com","title":"Credit"},{"location":"credit/#other-assets","text":"Idle Clicker Car Game Template - Asset store Clicker-Idle Game Template - Asset store 2D Platformer Game Template - Asset store The Battle Multiplayer Game Template - Asset store The Dungeon Game Kit - Asset store Quests system - Asset store","title":"Other Assets"},{"location":"credit/#other-projects","text":"Remains - Steam , GOG , VKPlay Operation sniff - Steam","title":"Other Projects"},{"location":"hierarchy/","text":"Project structure Description of project structure Project folders Animation - Animations used in the asset Fonts - Fonts for text Images - Sprites, icons Materials - Scene materials Prefabs - Prefabs of objects on the stage Scenes - Game scene Scripts - All project logic TextMesh Pro - Resources for using TextMeshPro Tilemap - Level Tiles Volume - Post processing configs Scene Main Camera - main camera on scene [Level] - here everything is related to the level, TileMap, Background [UI] - here are all the objects responsible for the UI [Managers]/Managers - The object containing Game/UI/Mobile controllers/li> [Managers]/EventSystem - Standard object for the UI part to work Volume - Level post processing","title":"Hierarchy"},{"location":"hierarchy/#project-structure","text":"Description of project structure","title":"Project structure"},{"location":"hierarchy/#project-folders","text":"Animation - Animations used in the asset Fonts - Fonts for text Images - Sprites, icons Materials - Scene materials Prefabs - Prefabs of objects on the stage Scenes - Game scene Scripts - All project logic TextMesh Pro - Resources for using TextMeshPro Tilemap - Level Tiles Volume - Post processing configs","title":"Project folders"},{"location":"hierarchy/#scene","text":"Main Camera - main camera on scene [Level] - here everything is related to the level, TileMap, Background [UI] - here are all the objects responsible for the UI [Managers]/Managers - The object containing Game/UI/Mobile controllers/li> [Managers]/EventSystem - Standard object for the UI part to work Volume - Level post processing","title":"Scene"},{"location":"images/","text":"Changing sprites to yours Images are pretty easy to edit UI Select any UI element from the [UI] object on the scene. Then in the Inspector window find the Image component, and in the Source Image box drag/select the desired sprite. Important! In order to be able to use an image in the UI, it must be Sprite. To convert the image into a sprite, you need to select it in the project and in the inspector window in the Texture type item select Sprite Level The game level is made with the Tile grid system. To work with the level, you will need to open the tile editing window: Window->2D->Tile palette More details: https://docs.unity3d.com/Manual/class-Tilemap.html","title":"Images"},{"location":"images/#changing-sprites-to-yours","text":"Images are pretty easy to edit","title":"Changing sprites to yours"},{"location":"images/#ui","text":"Select any UI element from the [UI] object on the scene. Then in the Inspector window find the Image component, and in the Source Image box drag/select the desired sprite. Important! In order to be able to use an image in the UI, it must be Sprite. To convert the image into a sprite, you need to select it in the project and in the inspector window in the Texture type item select Sprite","title":"UI"},{"location":"images/#level","text":"The game level is made with the Tile grid system. To work with the level, you will need to open the tile editing window: Window->2D->Tile palette More details: https://docs.unity3d.com/Manual/class-Tilemap.html","title":"Level"},{"location":"input/","text":"New Unity Input System This project uses a new input system Edit In order to configure the buttons you need to open the config: Find the file Assets/2D Platformer Ninja vs Zombies Game Template/Scripts/Input/Inputs.inputs Double-click and Unity will open the settings window To understand the setup, you can watch the official Unity video Game Usage In this project, I use my method to interact with the new input system. After you have configured and saved the input config. You need to go into InputManager.cs and add the new input there. This is very easy to do. You need to add a new line of code by replacing the names: Button click: public static bool NAME => CurrentInputs.Player.NAME_IN_INPUT_CONFIG.WasPerformedThisFrame(); Button up: public static bool NAME => CurrentInputs.Player.NAME_IN_INPUT_CONFIG.WasReleasedThisFrame(); Button hold: public static bool NAME => CurrentInputs.Player.NAME_IN_INPUT_CONFIG.IsPressed(); Use in your logic: private void YouMethod() { if (InputManager.NAME) { //Logic here } }","title":"New Input System"},{"location":"input/#new-unity-input-system","text":"This project uses a new input system","title":"New Unity Input System"},{"location":"input/#edit","text":"In order to configure the buttons you need to open the config: Find the file Assets/2D Platformer Ninja vs Zombies Game Template/Scripts/Input/Inputs.inputs Double-click and Unity will open the settings window To understand the setup, you can watch the official Unity video","title":"Edit"},{"location":"input/#game-usage","text":"In this project, I use my method to interact with the new input system. After you have configured and saved the input config. You need to go into InputManager.cs and add the new input there. This is very easy to do. You need to add a new line of code by replacing the names: Button click: public static bool NAME => CurrentInputs.Player.NAME_IN_INPUT_CONFIG.WasPerformedThisFrame(); Button up: public static bool NAME => CurrentInputs.Player.NAME_IN_INPUT_CONFIG.WasReleasedThisFrame(); Button hold: public static bool NAME => CurrentInputs.Player.NAME_IN_INPUT_CONFIG.IsPressed(); Use in your logic: private void YouMethod() { if (InputManager.NAME) { //Logic here } }","title":"Game Usage"}]}